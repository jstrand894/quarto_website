---
title: "Field Locoweed VOC Collection Report"
author: "Jackson Strand"
date: '`r format(Sys.Date())`'
output: 
  html_document:
    toc: true
    code_folding: hide
bibliography: locoweed.bib
link-citations: true
cls: council-of-science-editors-author-date.csl
editor_options: 
  chunk_output_type: console
toc: true
---

```{r libraries, echo = F, message = F, warning = F}
library(tidyverse)
library(readxl)
library(MASS) # manova
library(knitr)
library(kableExtra)
library(compositions)
# PERMANOVA
library(vegan)
library(spaa)
library(devtools)
devtools::install_github("GuillemSalazar/EcolUtils")
library(EcolUtils)
library(gridExtra)

# Random Forest
library(ranger)
library(MVN) # for normality test
library(plotly)
```

<!-- bee cover image -->
```{=html}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Image Cropping Example</title>
<style>
    }
    .image-container {
        width: auto; /* Set the width of the container */
        height: auto; /* Set the height of the container */
        overflow: hidden; /* Hide overflow */
    }
    .image-container img {
        width: 100%; /* Make the image fill the container horizontally */
        height: auto; /* Maintain aspect ratio */
        object-fit: cover;
        object-position: center;
    }
</style>
</head>
<body>

<div class="image-container">
    <img src="../../../../img/loco-bee-crop.JPG" alt="Your Image">
</div>

</body>
</html>

```

*Note: This project is still a work in progress.*

# Introduction
Astragalus and Oxytropix species, part of the Legume Family, are found in terestrial ecoysstems globally, including the western regions of North America. Many of these species are both nontoxic and important forages. However, several species are known to be toxic to both livestock and wildlife. *Oxytropis sericea* Nutt can harbor a commensal endophyte, *Alternaira oxytropos*, a fungus that is assocaited with locoweed plants, specifically those of the genus *Oxytropis*. Plants containing the endophyte have been found to produce swansonine, a toxic alkaloid that can be harmful to livestock when ingested in large quantities [@locoweed]. In this study, we investigated the potential differences in volatile organic compound (VOC) emissions between specimens that contained the commensal endophyte *Alternaria oxytropis*, and those that did not.

These data consist of volatile collection events over the course of two years, 2022 and 2023. In both years, data was collected from wild plants in the field, and plants grown in the greenhouse.

# Methodology
## Field Volatile Collection

Volatile collected was undergone on plants grown at a 34 x 60 ft plot at the Arthur H. Post Agronomy Farm (43°38'19.39"N, 116°14'28.86"W), an extension research station of Montana State University in Bozeman, MT. Plants were inventoried and logged using GPS, and tissue samples from each specimen were analyzed to establish whether the plant contained the endophyte. Volatiles were collected from all the plants in each year over the course of one to two successive weeks.

Volatile were collected from 20 plants per day by placing Reynolds Turkey Oven Bags (Reynolds Group Holdings, Auckland, New Zealand) over the top of the selected number of leaflets. 

Volatile collection and successive GC-MS analysis were conducted following methods described in Weaver et al. (2009). After the two hour collection period, glass volatile collection traps were eluted using 200 µL of dichloromethane into 2 mL screw top vials (Agilent Technologies, Inc., Santa Clara, CA), followed by a slow release of nitrogen to further clear the volatile trap. 10 µL of nonyl acetate solution was added to the eluted solution as internal standard to quantify compounds. Samples were then subject to gas chromatography (GC) on a J&W HP – 5ms; 30m x 0.25 µm film thickness column (Agilent Technologies, Inc., Santa Clara, CA). The GC unit (Agilent 6890; Agilent Technologies, Santa Clara, CA) was paired with a mass spectrometer (MS, Agilent 5973 instrument). Samples were injected into the column in pulse splitless mode, with the initial pressure of 82.7 kPa/m. 

## Data Analysis  
The data analysis procedure for each collection type was the same. Statistical analyses were conducted in R (R Core Team 2024) using RStudio (version 4.2.1) using PERMANOVA, PERMDISP, and Random Forest modeling. The data was first transformed using a center log-ratio (CLR) transformation, a technique commonly used when analyzing multivariate compositional data [@chemoguide]. VOC compositions were compared between samples and treatments using a permutational multivariate analysis of variance (PERMANOVA, Canberra distance, 999 iterations) tests implemented in the vegan package (v 2.6-4) [@vegan]. This technique uses permutation testing to generate many different rearrangements of the data to assess if the observed differences are statistically significant [@anderson2017]. Data were visualized using a combination of ggplot2 and knitr [@ggplot; @knitr]. I selected a subset of compounds to use for each analysis. These compounds were selected based on consistency of presence across samples and years, as well as overall quality of mass spectroscopy output. The locoweed samples, both SWA + and SWA -, exhibited numerous chromatogram peaks during collection. However, only volatile compounds showing significant peaks in the mass spectroscopy output or presenting differences in the overlays of the two SWA types were chosen for analysis. 

# Results
<!-- LOAD DATA -->
```{r 2023 field data load, echo = F, message = F}
field.2023 <-
read_excel("/Users/jacksonstrand/Library/CloudStorage/OneDrive-MontanaStateUniversity/Data/Locoweed/Field/2023\ Field/2023\ Field\ Locoweed.xlsx", sheet = "proc") 
```
```{r 2022 field data load, echo = F, message = F}
field.2022 <-
read_excel("/Users/jacksonstrand/Library/CloudStorage/OneDrive-MontanaStateUniversity/Data/Locoweed/Field/2022\ Field/2022\ Field\ Locoweed.xlsx", sheet = "RAW proc") %>%
  dplyr::filter(!plant.id == "581")
```
<!-- CLEAN UP DATA -->
```{r 2023 field data cleanup, echo = F, message = F}
field.2023.data <-
field.2023 %>%
  filter(compound %in% c("heptanal", "sixmethyl", "octanal",
                         "z3hex", "dlimonene", "nonanal", 
                         "decanal", "methylsalicylate", "cisthreehexiso")) %>%
  dplyr::select(plant.id, compound, ngghr) %>%
  group_by(plant.id, compound) %>%
  na.omit() %>%
  dplyr::reframe(ngghr = sum(ngghr)) %>%
  distinct() %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  pivot_longer(-plant.id,
               names_to = "compound",
               values_to = "ngghr") %>%
  replace(is.na(.), 0) %>% filter(compound != "NA") %>%
  mutate(ngghr = log(ngghr + 1.01, 2)) %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  left_join(field.2023 %>% 
              dplyr::select(plant.id, swa, type, pair2), # go back and add pairs later
            by = "plant.id") %>%
  replace(is.na(.), 0) %>%
  distinct() %>%
  mutate_at(vars(swa, type), list(factor)) %>%
  ungroup() %>%
  mutate(year = "2023")
```
```{r 2022 field data cleanup, echo = F, message = F}
field.2022.data <-
field.2022 %>%
  filter(compound %in% c("heptanal", "sixmethyl", "octanal",
                         "z3hex", "dlimonene", "nonanal", 
                         "decanal", "methylsalicylate", "cisthreehexiso")) %>%
  dplyr::select(plant.id, compound, ngghr) %>%
  group_by(plant.id, compound) %>%
  na.omit() %>%
  dplyr::reframe(ngghr = sum(ngghr)) %>%
  distinct() %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  pivot_longer(-plant.id,
               names_to = "compound",
               values_to = "ngghr") %>%
  replace(is.na(.), 0) %>% filter(compound != "NA") %>%
  mutate(ngghr = log(ngghr + 1.01, 2)) %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  left_join(field.2022 %>% 
              dplyr::select(plant.id, swa, collection.type, pair2), # go back and add pairs later
            by = "plant.id") %>%
  # replace(is.na(.), 0) %>%
  distinct() %>%
  mutate_at(vars(swa, collection.type), list(factor)) %>%
  ungroup() %>%
  mutate(year = "2022") %>%
  rename(type = collection.type) %>%
  filter(!is.na(type) & type != 0) %>%
  # replace leaves and flowers with l and s
  mutate(type = ifelse(type == "leaves", "l", "f"))
  
```
<!-- COMPOUNDS TO BE USED IN ANALYSIS -->
```{r COMPOUNDS, echo = F, message = F}
compounds <- c('sixmethyl',
               'z3hex',
               'nonanal',
               'dlimonene',
               'methylsalicylate',
               # 'decanal',
               'cisthreehexiso',
               'dodecanal',
               # 'heptadecanal',
               'octanal',
               'bocimene',
               'bmyrcene',
               'heptanal')

# "heptanal", "sixmethyl", "octanal",
#                          "z3hex", "dlimonene", "nonanal", 
#                          "decanal", "methylsalicylate",
#                          "cisthreehexiso"
```
<!-- CLR TRANSFORMATION -->
```{R CLR, echo = F, message = F}
joined.data <-
field.2023 %>%
  dplyr::select(plant.id, compound, ngghr) %>%
  filter(compound %in% compounds) %>%
  group_by(plant.id, compound) %>%
  na.omit() %>%
  dplyr::reframe(plant.id, compound, ngghr = sum(ngghr)) %>%
  distinct() %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  pivot_longer(-plant.id,
               names_to = "compound",
               values_to = "ngghr") %>%
  mutate(year = "2023") %>%
  left_join(field.2023 %>%
              dplyr::select(plant.id, 
                            swa, type, pair2),
            by = "plant.id",
            relationship = "many-to-many") %>%
  mutate_at(vars(swa), list(factor)) %>%
  # rbind 2022 data
  rbind(field.2022 %>%
          dplyr::select(plant.id, compound, ngghr) %>%
          # filter(compound %in% c('sixmethyl','z3hex','nonanal',
          #                       'dlimonene','methylsalicylate',
          #                       'decanal','cisthreehexiso','dodecanal',
          #                       'heptadecanal','octanal','bocimene',
          #                       'bmyrcene','heptanal')) %>%
          group_by(plant.id, compound) %>%
          na.omit() %>%
          dplyr::reframe(plant.id, compound, 
                           ngghr = sum(ngghr)) %>%
          distinct() %>%
          pivot_wider(names_from = "compound",
                      values_from = "ngghr") %>%
          pivot_longer(-plant.id,
                       names_to = "compound",
                       values_to = "ngghr") %>%
          mutate(year = "2022") %>%
          left_join(field.2022 %>%
                      dplyr::select(plant.id,
                                    swa, collection.type, pair2) %>%
                      mutate_at(vars(swa), list(factor)),
                    by = "plant.id",
                    relationship = "many-to-many") %>%
          rename(type = collection.type)) %>%
  distinct() 


# having trouble joining the two data sets because of the pair2 column 
joined.data.clr <-
joined.data %>%
  filter(compound %in% compounds) %>%
  dplyr::select(plant.id, ngghr, compound, year) %>%
  # replace(is.na(.), 0) %>% filter(compound != "NA") %>%
  replace(is.na(.), 0) %>%
  mutate(ngghr = ifelse(ngghr == 0, 0.01, ngghr)) %>%
  mutate(ngghr = ngghr + 1) %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
    # combine year and plant id into one column
  unite(plant.id, plant.id, year, sep = "_") %>%
  column_to_rownames("plant.id") %>%
  clr() %>%
  # put rownames back as a column
  as.data.frame() %>%
  rownames_to_column("plant.id") %>%
    # move year and plant id back to being sepearte columns
  separate(plant.id, into = c("plant.id", "year"), sep = "_") %>%
  pivot_longer(-c(plant.id, year),
               names_to = "compound",
               values_to = "ngghr") %>%
  # add a value of 2 to each ngghr to remove negatives
  mutate(ngghr = ngghr + 2) %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  # join
  left_join(joined.data %>%
              dplyr::select(plant.id, swa, year, type, pair2) %>%
              mutate(plant.id = as.character(plant.id)),
            by = c("plant.id","year")) %>%
  mutate_at(vars(swa, year), list(factor)) %>%
  distinct() %>%
  na.omit() %>%
  # i'm going to ignore the "stressed" 
  # designation and just make those type "leaf"
  mutate(type = recode(type, "leaves" = "l", "flowers" = "f", "s" = "l")) %>%
  filter(!type == 0) %>%
  distinct()
```

## Visual Comparisons
### Box Plot
Eleven compounds were selected to display comparisons. 
```{r all.comparison.plot, echo = F, fig.align = 'center', fig.width = 10}
all.comparison.plot <-
joined.data.clr %>%
  rename("cis-3-Hexenyl Isovalerate" = cisthreehexiso,
         "D-Limonene" = dlimonene,
         "Dodecanal" = dodecanal,
         "Heptanal" = heptanal,
         "Mehthyl Salicylate" = methylsalicylate,
         "Nonanal" = nonanal,
         "Octanal" = octanal,
         "6-methyl-5-hepten-2-one" = sixmethyl,
         "Z-3-Hexenyl Acetate" = z3hex,
         "B-Myrcene" = bmyrcene,
         "B-Ocimene" = bocimene) %>%
  # pivot to make all compounds in one column
  pivot_longer(-c(plant.id, year, swa, type, pair2),
               names_to = "compound",
               values_to = "ngghr") %>%
  # ggplot code
  ggplot(aes(compound, ngghr, fill = swa)) +
  geom_boxplot(position = position_dodge(width = 0.9),
                 outlier.color = NA,
                 alpha = 0.5) +
  geom_jitter(aes(compound, ngghr),
              alpha = 0.3,
              position = position_jitterdodge(jitter.width = 0.2,
                                              dodge.width = .8),
              show.legend = FALSE,
              # pch = 21, 
              stroke = 0, 
              size = 1.5) +
  theme(axis.text.x = element_text(angle = 45, 
                                    hjust = 1),
        legend.background = element_rect(color = "black"),
        # legend.position = c(0.8,0.9),
        panel.background = element_rect(fill = "white"),
        axis.line = element_line(color = "black"),
        plot.margin = margin(0.5,0.5,0.5,1.5,"cm"),
        panel.grid.major.x = element_line(color = "#F2F2F2")) +
  labs(x = element_blank(),
       y = "VOC quantity (CLR(ng/g/hr))",
       title = "2022/23 Field Locoweed Volatile Profile Comparison") +
  scale_fill_discrete(name = "Endophyte",
                      labels = c("Not Present", "Present"))
all.comparison.plot
```
```{r save all comparison plot, echo = F}
ggsave(filename = "Field Locoweed Comparison BoxPlot.png",
       plot = all.comparison.plot,
       path = "locoweed_plots/",
       width = 6,
       height = 4)
```
```{=html}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Download File Buttons</title>
<style>
/* Button styling */
.button {
  background-color: #2068DC; /* Header of website color (blue) */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  border-radius: 8px;
  margin: 0 200px;
}
.button:hover {
  background-color: #3F91FB; /* Sky blue */
}
.button-container {
  display: flex;
  justify-content: center;
  margin-bottom: 10px;
}
</style>
</head>
<body>

<!-- Buttons to download the file -->
<div class="button-container">
  <a href="locoweed_plots/Field Locoweed Comparison BoxPlot.png" download>
    <button class="button">Download</button>
  </a>
</div>
</body>
</html>
```
:::{.callout-note}
I chose to visualize the data using a box plot, not a bar plot, because our data has been CLR transformed. As we can see, there isn't a tremendous amount of obvious variance between E+ and E- samples. This does not, however, mean there aren't differences when considering the overall volatile profiles.  
:::

### PCA
Principal Component Analysis (PCA) is a dimensionality reduction technique used to transform high-dimensional data into a lower-dimensional representation while preserving most of the original variability. It identifies the directions (principal components) that capture the maximum variance in the data and projects the data onto these components. 

```{r PCA swa, echo = F}
pca.results <- 
joined.data.clr %>%
  dplyr::select(-c(year, plant.id, swa, type, pair2)) %>%
  prcomp(scale = T)

scores <- as.data.frame(pca.results$x)
loadings <- as.data.frame(pca.results$rotation)
variance <- as.data.frame(pca.results$sdev^2)

data.plus.pca <-
  joined.data.clr %>%
    cbind(scores[,1:2])

PC1 <- pca.results$x[,1]
PC2 <- pca.results$x[,2]

loadings.plot <-
loadings %>%
  dplyr::select(PC1, PC2) %>%
  rownames_to_column("compound")

meta <- joined.data.clr %>% dplyr::select(plant.id, type, year, swa, pair2)
all.pca <- data.frame(PC1, PC2, meta)

ggplot() +
  geom_point(data = all.pca,
             aes(PC1, PC2, color = swa),
             alpha = 0.8) +
  # geom_text(aes(label = day))
  geom_hline(yintercept = 0, color = "gray", linetype = "dashed") +
  geom_vline(xintercept = 0, color = "gray", linetype = "dashed") +
  labs(x = "PC1", y = "PC2", 
       color = element_blank(),
       title = "Field Locoweed Volatile Collection PCA") +
  stat_ellipse(data = all.pca,
               aes(PC1, PC2, color = swa)) +
  theme_bw() +
  scale_color_discrete(name = "Endophyte",
                      labels = c("Not Present", "Present"))
```

Our PCA shows very little difference overall between the two groups of plants. Let's look at comparing PCA results if we change our response variable. 

```{r PCA type, echo = F}
ggplot() +
  geom_point(data = all.pca,
             aes(PC1, PC2, color = type),
             alpha = 0.8) +
  # geom_text(aes(label = day))
  geom_hline(yintercept = 0, color = "gray", linetype = "dashed") +
  geom_vline(xintercept = 0, color = "gray", linetype = "dashed") +
  labs(x = "PC1", y = "PC2", 
       color = element_blank(),
       title = "Field Locoweed Volatile Collection PCA - plant type") +
  stat_ellipse(data = all.pca,
               aes(PC1, PC2, color = type)) +
  theme_bw() +
  scale_color_discrete(name = "Plant Type",
                      labels = c("Flowers", "Leaves"))
```

It looks like from our plant type PCA that there is a difference in the variance of the volatile profile emitted by flowers compared to leaves. Let's break up our samples and run a separate PCA for flowers and for leaves and see if we notice a bigger difference between our E+ and E- groups. 

```{r PCA separate, echo = F, fig.width = 10}
# flowers
pca.results <- 
joined.data.clr %>%
  filter(type == "f") %>%
  dplyr::select(-c(year, plant.id, swa, type, pair2)) %>%
  prcomp(scale = T)

scores <- as.data.frame(pca.results$x)
loadings <- as.data.frame(pca.results$rotation)
variance <- as.data.frame(pca.results$sdev^2)

data.plus.pca <-
  joined.data.clr %>%
  filter(type == "f") %>%
  cbind(scores[,1:2])

PC1 <- pca.results$x[,1]
PC2 <- pca.results$x[,2]

loadings.plot <-
loadings %>%
  dplyr::select(PC1, PC2) %>%
  rownames_to_column("compound")

meta <- joined.data.clr %>%
  filter(type == "f") %>%
  dplyr::select(plant.id, type, year, swa, pair2)
all.pca <- data.frame(PC1, PC2, meta)

flowers <-
ggplot() +
  geom_point(data = all.pca,
             aes(PC1, PC2, color = swa),
             alpha = 0.8) +
  # geom_text(aes(label = day))
  geom_hline(yintercept = 0, color = "gray", linetype = "dashed") +
  geom_vline(xintercept = 0, color = "gray", linetype = "dashed") +
  labs(x = "PC1", y = "PC2", 
       color = element_blank(),
       title = "Field Locoweed Volatile Collection PCA",
       subtitle = "Flowers") +
  stat_ellipse(data = all.pca,
               aes(PC1, PC2, color = swa)) +
  theme_bw() +
  scale_color_discrete(name = "Endophyte",
                      labels = c("Not Present", "Present"))

# leaves
pca.results <- 
joined.data.clr %>%
  filter(type == "l") %>%
  dplyr::select(-c(year, plant.id, swa, type, pair2)) %>%
  prcomp(scale = T)

scores <- as.data.frame(pca.results$x)
loadings <- as.data.frame(pca.results$rotation)
variance <- as.data.frame(pca.results$sdev^2)

data.plus.pca <-
  joined.data.clr %>%
  filter(type == "l") %>%
  cbind(scores[,1:2])

PC1 <- pca.results$x[,1]
PC2 <- pca.results$x[,2]

loadings.plot <-
loadings %>%
  dplyr::select(PC1, PC2) %>%
  rownames_to_column("compound")

meta <- joined.data.clr %>%
  filter(type == "l") %>%
  dplyr::select(plant.id, type, year, swa, pair2)
all.pca <- data.frame(PC1, PC2, meta)

leaves <- 
ggplot() +
  geom_point(data = all.pca,
             aes(PC1, PC2, color = swa),
             alpha = 0.8) +
  # geom_text(aes(label = day))
  geom_hline(yintercept = 0, color = "gray", linetype = "dashed") +
  geom_vline(xintercept = 0, color = "gray", linetype = "dashed") +
  labs(x = "PC1", y = "PC2", 
       color = element_blank(),
       title = "Field Locoweed Volatile Collection PCA",
       subtitle = "Leaves") +
  stat_ellipse(data = all.pca,
               aes(PC1, PC2, color = swa)) +
  theme_bw() +
  scale_color_discrete(name = "Endophyte",
                      labels = c("Not Present", "Present"))

grid.arrange(flowers,leaves, ncol = 2)
```

Even after splitting up our samples into flower and leaf subgroups, visually there does not appear to be a significant difference in volatile profiles between E+ and E-. 


## Check Assumptions  
The statistical analyses we can perform are greatly impacted by our data's ability to meet statistical assumptions. One of the major assumptions here is normality. We are going to test this assumption using the `MVN` package. 
```{r assumptions, echo = F}
library(MVN)
kable(
  mvn(joined.data.clr %>%
        dplyr::select(-c(plant.id, swa, year, type, pair2)), 
      mvnTest = "mardia", 
      multivariatePlot = "qq")$univariateNormality,
  format = "html",
  caption = "Table 2: Assessment of Normality",
  align = "llccc") %>%
  kable_styling(full_width = FALSE,
                bootstrap_options = c("striped", "bordered", "hover")) %>%
  row_spec(0, background = "#f2f2f9") 

```

<div class="box">
**Assumption Conclusions**  
From the Chi-Squared QQ-Plot (figure 2), we can see that our data set violates the normality assumption. The tail on the right half of the plot dramatically skews away from the normality line.  

In addition, the results from the Anderson-Darling normality tests (table 1) reveal that every variable in individually non-normal. 

As we can see, our data violates the normality assumption. This is the case even though we ran it though a CLR transformation. 
</div>
:::{.callout-note}
**A quick note here.**  
Many papers analyzing ecological or compositional data and VOC datasets often employ a statistical test known as [MANOVA](https://en.wikipedia.org/wiki/Multivariate_analysis_of_variance) (Multivariate Analysis of Variance). Despite the similarity of the data to ours in many instances, MANOVA is used even though the data being analyzed violates the normality assumption. Since our data clearly violates this assumption, we have decided against using this method.
:::

## Kruskal-Wallis Test
The [Kruskal-Wallis](https://en.wikipedia.org/wiki/Kruskal–Wallis_test) test is a non-parametric statistical test used to determine if there are differences between two or more independent groups. It assesses whether the distributions of scores across groups are the same or different, without assuming the data follow a normal distribution, making it suitable for ordinal or non-normally distributed data.

```{r kw test, echo = F, fig.width = 3}
compound.columns <- names(joined.data.clr)[sapply(joined.data.clr, is.numeric)]
p_values <- numeric()

for (col in compound.columns) {
  kruskal_result <- kruskal.test(joined.data.clr[[col]] ~ joined.data.clr$swa)
  p_values <- c(p_values, kruskal_result$p.value)
}

results_df <- data.frame(Column = compound.columns, P_Value = round(p_values,3)) %>%
  arrange(P_Value)

kable(results_df,
      format = "html",
      caption = "ANOVA results",
      align = "lc") %>%
  kable_styling(full_width = FALSE,
                bootstrap_options = c("striped", "bordered", "hover")) 
      

```

Our KW results show what we might expect after seeing the box and whisker plot above (figure 1). None of the p-values are significant. 

## PERMANOVA

As described above, a [PERMANOVA](https://en.wikipedia.org/wiki/Permutational_analysis_of_variance) (Permutational Multivariate Analysis of Variance) uses permutation testing to generate many different rearrangements of the data and assess if the observed differences are statistically significant [@anderson2017]. This method is important as it considers all of the volatile profiles overall when generating a p-value. 

```{r PERMDISP & PERMANOVA data, echo = F}
set.seed(1)
permanova.data <-
  joined.data.clr %>%
  dplyr::select(-swa,-type,-year,-pair2) %>%
  column_to_rownames("plant.id") %>%
  na.omit() %>%
  mutate_all(~.^2) %>%
  mutate_all(~.*100000) %>%
  mutate_all(round, digits = 0) 

# dist.matrix <-
# vegdist(t(permanova.data),
#         method = "canberra")

dist.matrix <-
vegdist(permanova.data,
        method = "canberra")

data.per.meta <-
  joined.data.clr %>%
  dplyr::select(swa,type,year,pair2) %>%
  mutate(year = factor(year, levels = c("2023", "2022")))
```
```{r 22/23 FIELD PERMANOVA, results = F}
set.seed(1)
permanova.output <-
adonis2(permanova.data ~ data.per.meta$swa, 
        strata = interaction(data.per.meta$pair2, 
                             data.per.meta$type, 
                             data.per.meta$year),
        method = "canberra",
        permutations = 999,
        by = "terms",
        na.rm = TRUE)

permanova.output
```
```{r PERMANOVA table, echo = F}

kable(as.data.frame(permanova.output),
      format = "html",
      caption = "Table 1: Field Locoweed VOC collection PERMANOVA results.   data.per.meta$swa is our E+/E- variable.",
      align = "lccccc") %>%
  kable_styling(full_width = FALSE,
                bootstrap_options = c("striped", "bordered", "hover")) %>%
  row_spec(0, background = "#f2f2f9") 


```
<!-- Permanova P-values -->
```{r PERMANOVA p-values, echo  = F}
p.value.swa <- permanova.output$`Pr(>F)`[1]
# p.value.year <- permanova.output$`Pr(>F)`[2]
# p.value.type <- permanova.output$`Pr(>F)`[3]
```

## Random Forest  

Next, we are going to use a random forest model to assess the importance of each of our compounds in distinguishing samples between E+ and E-. To do this we are going to use the `ranger` package in R. 

```{r random forest, echo = F}
ranger_model <- ranger(swa ~ ., 
                       data = joined.data.clr %>%
                         dplyr::select(-plant.id),
                       importance = "impurity")

var_importance <- importance(ranger_model)

var_importance_df <- 
  data.frame(
    variables = names(var_importance),
    importance = var_importance) %>%
  arrange(desc(importance)) %>%
  rownames_to_column(var = "name") %>% dplyr::select(-name) %>%
  mutate(variables = factor(variables, levels = unique(variables)))

ggplotly(
ggplot(var_importance_df, aes(x = variables, y = importance)) +
  geom_bar(stat = "identity") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = NULL,
       y = "Variable Importance",
       title = "Random Forest Variable Importance")
)
```

<!-- There was no interaction between plant species and data of volatile collection.  -->

<!-- Our results show **weak** evidence of a difference between SWA+ and SWA- locoweed plants (p-val = `r p.value.swa`).   -->
 


