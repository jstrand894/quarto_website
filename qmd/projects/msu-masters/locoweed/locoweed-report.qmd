---
title: "Locoweed Volatiles Report"
author: "Jackson Strand"
date: '`r format(Sys.Date())`'
output: 
  html_document:
    toc: true
    code_folding: hide
bibliography: locoweed.bib
link-citations: true
cls: council-of-science-editors-author-date.csl
editor_options: 
  chunk_output_type: console
toc: true
---

```{r libraries, echo = F, message = F, warning = F}
library(tidyverse)
library(readxl)
library(MASS)
library(knitr)
library(kableExtra)
library(compositions)
# PERMANOVA
library(vegan)
library(spaa)
library(devtools)
devtools::install_github("GuillemSalazar/EcolUtils")
library(EcolUtils)

# Random Forest
library(ranger)
library(MVN) # for normality test
library(plotly)
```

<!-- bee cover image -->
```{=html}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Image Cropping Example</title>
<style>
    }
    .image-container {
        width: auto; /* Set the width of the container */
        height: auto; /* Set the height of the container */
        overflow: hidden; /* Hide overflow */
    }
    .image-container img {
        width: 100%; /* Make the image fill the container horizontally */
        height: auto; /* Maintain aspect ratio */
        object-fit: cover;
        object-position: center;
    }
</style>
</head>
<body>

<div class="image-container">
    <img src="../../../../img/loco-bee-crop.JPG" alt="Your Image">
</div>

</body>
</html>

```

*Note: This project is still a work in progress.*

# INTRODUCTION
Astragalus and Oxytropix species, part of the Legume Family, are found in terestrial ecoysstems globally, including the western regions of North America. Many of these species are both nontoxic and important forages. However, several species are known to be toxic to both livestock and wildlife. *Oxytropis sericea Nutt* can harbor a commensal endophyte, *Alternaira oxytropos*, a fungus that is assocaited with locoweed plants, specifically those of the genus *Oxytropis*. Plants containing the endophyte have been found to produce swansonine, a toxic alkaloid that can be harmful to livestock when ingested in large quantities [@locoweed]. In this study, we investigated the potential differences in volatile organic compound (VOC) emissions between specimens that contained the commensal endophyte *Alternaria oxytropis*, and those that did not.

These data consist of volatile collection events over the course of two years, 2022 and 2023. In both years, data was collected from wild plants in the field, and plants grown in the greenhouse.

# METHODOLOGY
## Data Collection
### Field Volatile Collection

Volatile collected was undergone on plants grown at a 34 x 60 ft plot at the Arthur H. Post Agronomy Farm (43°38'19.39"N, 116°14'28.86"W), an extension research station of Montana State University in Bozeman, MT. Plants were inventoried and logged using GPS, and tissue samples from each specimen were analyzed to establish whether the plant contained the endophyte. Volatiles were collected from all the plants in each year over the course of one to two successive weeks.

Volatile were collected from 20 plants per day by placing Reynolds Turkey Oven Bags (Reynolds Group Holdings, Auckland, New Zealand) over the top of the selected number of leaflets. 


### Greenhouse Volatile Collection
Samples of each plant were first sent for analysis to mystery lab to see if endophyte was present or not. 
Volatile compounds were collected from healthy *(size/stage)* locoweed plants. Plants were paired based on size similarity, with one being E+ and the other E-. Three sets of pairs (twelve plants) were used for each volatile collection event. Collection was undergone for a period of six hours from 09:00 to 15:00. 
  
```{r plant pictures, echo = F, eval = F}

# Set the directory path
directory_path <- "../../../img/loco-plants"

# List all the files in the directory
file_names <- list.files(directory_path)

# Initialize an empty character vector to store the HTML code
html_code <- "<div class=\"gallery\">\n"

# Loop through each file name and generate HTML code
for (i in seq_along(file_names)) {
  # Generate the HTML code for each image
  image_html <- paste0('<img src="', "../",directory_path, "/", file_names[i], '" alt="Image ', i, '" onclick="expandImage(this)">\n')
  
  # Append the generated HTML code to the existing code
  html_code <- paste(html_code, image_html, sep = "")
}

# Close the gallery div
html_code <- paste(html_code, "</div>\n<div class=\"expanded-container\" onclick=\"closeExpanded()\">\n  <img class=\"expanded\" id=\"expanded-image\" onclick=\"navigateGallery(event)\">\n</div>", sep = "")

# Print the final HTML code
cat(html_code)

```
```{=html}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Image Gallery</title>
  <style>
    .gallery {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      grid-gap: 10px;
    }
    .gallery img {
      width: 100%;
      height: 100%;
      object-fit: cover; /* Ensure images cover the entire space */
      cursor: pointer;
      transition: transform 0.3s ease;
    }
    .gallery img:hover {
      transform: scale(1.05); /* Slightly increase size on hover */
    }
    .expanded-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8); /* Semi-transparent background */
      display: none; /* Initially hidden */
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    .expanded {
      max-width: 80%;
      max-height: 80%;
      cursor: pointer;
    }
    p.gallery-caption {
      text-align: center;
      font-style: italic;
      color: #8B8989;
    }
  </style>
</head>
<body>

<div class="gallery">
<img src="../../../../img/loco-plants/IMG_0064.jpg" alt="Image 1" onclick="expandImage(this)">
<img src="../../../../img/loco-plants/IMG_0820 2.jpg" alt="Image 2" onclick="expandImage(this)">
<img src="../../../../img/loco-plants/IMG_1165.jpg" alt="Image 3" onclick="expandImage(this)">
<img src="../../../../img/loco-plants/IMG_1177.jpg" alt="Image 4" onclick="expandImage(this)">
<img src="../../../../img/loco-plants/IMG_1923.jpg" alt="Image 5" onclick="expandImage(this)">
</div>
<div class="expanded-container" onclick="closeExpanded()">
  <img class="expanded" id="expanded-image" onclick="navigateGallery(event)">
</div>

<p class="gallery-caption">Greenhouse Locoweed volatiles were collected from plants that looked like these.</p>

<script>
  var currentImageIndex = 0;
  var galleryImages = document.querySelectorAll('.gallery img');

  function expandImage(img) {
    currentImageIndex = Array.from(galleryImages).indexOf(img);
    document.getElementById('expanded-image').src = img.src;
    document.querySelector('.expanded-container').style.display = 'flex';
  }

  function closeExpanded() {
    document.querySelector('.expanded-container').style.display = 'none';
  }

  function navigateGallery(event) {
    // Calculate the click position relative to the expanded image
    var clickX = event.pageX - event.target.getBoundingClientRect().left;
    var imageWidth = event.target.offsetWidth;

    // Determine if the click was on the left or right side of the image
    if (clickX < imageWidth / 2) {
      // Clicked on the left side: navigate to the previous image
      currentImageIndex = (currentImageIndex - 1 + galleryImages.length) % galleryImages.length;
    } else {
      // Clicked on the right side: navigate to the next image
      currentImageIndex = (currentImageIndex + 1) % galleryImages.length;
    }

    // Update the expanded image source
    document.getElementById('expanded-image').src = galleryImages[currentImageIndex].src;
  }
</script>

</body>
</html>

```
  
<br>
Volatiles were collected from twleve plants per day using glass volatile collection chambers (VCCs) that were 30 cm long and 4 cm in diameter. The top end of each VCC funneled into a threaded port that was 10 cm in daimter. Threaded onto the top of each VCC was an eight-port "octopus" manifold adapter. Two glass filter traps (6.35 mm diameter x 76 mm length; Analytical Research Systems, Gainesville, FL) with 30 mg of Super-Q absorbent (Alltech Associates, Deerfield, IL) were inserted into two of the adapter ports. The remaining six collection ports were sealed to prevent ambient air exchange and pressure loss. One of the traps was used to collected extraneous volatiles from the initial experiment set up for the first ten minutes, whereas the other trap was used to collect volatile compounds emanating from plants beginning ten minutes after the system was turned on. An air source was connected to the base of each collection chamber with supply from charcoal air filters. A vacuum pump was used to maintain air pressure and flow rate (humidified air at 1.0 liter/min) within the collection system. A small piece of cotton encompassed by a Teflon® guillotine was used at the base of each plant to tightly seal the base of the system and prevent external air from entering. Laboratory tape was used to seal the edges of the guillotine and prevent contamination by ambient and soil derived volatiles.  

Volatile collection and successive GC-MS analysis were conducted following methods described in Weaver et al. (2009). After the six hour collection period, glass volatile collection traps were eluted using 200 µL of dichloromethane into 2 mL screw top vials (Agilent Technologies, Inc., Santa Clara, CA), followed by a slow release of nitrogen to further clear the volatile trap. 10 µL of nonyl acetate solution was added to the eluted solution as internal standard to quantify compounds. Samples were then subject to gas chromatography (GC) on a J&W HP – 5ms; 30m x 0.25 µm film thickness column (Agilent Technologies, Inc., Santa Clara, CA). The GC unit (Agilent 6890; Agilent Technologies, Santa Clara, CA) was paired with a mass spectrometer (MS, Agilent 5973 instrument). Samples were injected into the column in pulse splitless mode, with the initial pressure of 82.7 kPa/m. 

## Data Analysis
The data analysis procedure for each collection type was the same. Statistical analyses were conducted in R (R Core Team 2024) using RStudio (version 4.2.1) using PERMANOVA, PERMDISP, and Random Forest modeling. The data was first transformed using a center log-ratio (CLR) transformation, a technique commonly used when analyzing multivariate compositional data [@chemoguide]. VOC compositions were compared between samples and treatments using a permutational multivariate analysis of variance (PERMANOVA, Canberra distance, 999 iterations) tests implemented in the vegan package (v 2.6-4) [@vegan]. This technique uses permutation testing to generate many different rearrangements of the data to assess if the observed differences are statistically significant [@anderson2017]. Data were visualized using a combination of ggplot2 and knitr [@ggplot; @knitr]. I selected a subset of compounds to ues for each analysis. These compounds were selected based on consistency of presence across samples and years, as well as overall quality of mass spectroscopy output.

# RESULTS
<!-- LOAD DATA -->
```{r 2023 field data load, echo = F, message = F}
field.2023 <-
read_excel("/Users/jacksonstrand/Library/CloudStorage/OneDrive-MontanaStateUniversity/Data/Locoweed/Field/2023\ Field/2023\ Field\ Locoweed.xlsx", sheet = "proc") 
```
```{r 2022 field data load, echo = F, message = F}
field.2022 <-
read_excel("/Users/jacksonstrand/Library/CloudStorage/OneDrive-MontanaStateUniversity/Data/Locoweed/Field/2022\ Field/2022\ Field\ Locoweed.xlsx", sheet = "RAW proc") %>%
  dplyr::filter(!plant.id == "581")
```
<!-- CLEAN UP DATA -->
```{r 2023 field data cleanup, echo = F, message = F}
field.2023.data <-
field.2023 %>%
  filter(compound %in% c("heptanal", "sixmethyl", "octanal",
                         "z3hex", "dlimonene", "nonanal", 
                         "decanal", "methylsalicylate", "cisthreehexiso")) %>%
  dplyr::select(plant.id, compound, ngghr) %>%
  group_by(plant.id, compound) %>%
  na.omit() %>%
  dplyr::reframe(ngghr = sum(ngghr)) %>%
  distinct() %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  pivot_longer(-plant.id,
               names_to = "compound",
               values_to = "ngghr") %>%
  replace(is.na(.), 0) %>% filter(compound != "NA") %>%
  mutate(ngghr = log(ngghr + 1.01, 2)) %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  left_join(field.2023 %>% 
              dplyr::select(plant.id, swa, type, pair2), # go back and add pairs later
            by = "plant.id") %>%
  replace(is.na(.), 0) %>%
  distinct() %>%
  mutate_at(vars(swa, type), list(factor)) %>%
  ungroup() %>%
  mutate(year = "2023")
```
```{r 2022 field data cleanup, echo = F, message = F}
field.2022.data <-
field.2022 %>%
  filter(compound %in% c("heptanal", "sixmethyl", "octanal",
                         "z3hex", "dlimonene", "nonanal", 
                         "decanal", "methylsalicylate", "cisthreehexiso")) %>%
  dplyr::select(plant.id, compound, ngghr) %>%
  group_by(plant.id, compound) %>%
  na.omit() %>%
  dplyr::reframe(ngghr = sum(ngghr)) %>%
  distinct() %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  pivot_longer(-plant.id,
               names_to = "compound",
               values_to = "ngghr") %>%
  replace(is.na(.), 0) %>% filter(compound != "NA") %>%
  mutate(ngghr = log(ngghr + 1.01, 2)) %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  left_join(field.2022 %>% 
              dplyr::select(plant.id, swa, collection.type, pair2), # go back and add pairs later
            by = "plant.id") %>%
  # replace(is.na(.), 0) %>%
  distinct() %>%
  mutate_at(vars(swa, collection.type), list(factor)) %>%
  ungroup() %>%
  mutate(year = "2022") %>%
  rename(type = collection.type) %>%
  filter(!is.na(type) & type != 0) %>%
  # replace leaves and flowers with l and s
  mutate(type = ifelse(type == "leaves", "l", "f"))
  
```
<!-- COMPOUNDS TO BE USED IN ANALYSIS -->
```{r COMPOUNDS, echo = F, message = F}
compounds <- c('sixmethyl',
               'z3hex',
               'nonanal',
               'dlimonene',
               'methylsalicylate',
               # 'decanal',
               'cisthreehexiso',
               'dodecanal',
               # 'heptadecanal',
               'octanal',
               'bocimene',
               'bmyrcene',
               'heptanal')

# "heptanal", "sixmethyl", "octanal",
#                          "z3hex", "dlimonene", "nonanal", 
#                          "decanal", "methylsalicylate",
#                          "cisthreehexiso"
```
<!-- CLR TRANSFORMATION -->
```{R CLR, echo = F, message = F}
joined.data <-
field.2023 %>%
  dplyr::select(plant.id, compound, ngghr) %>%
  filter(compound %in% compounds) %>%
  group_by(plant.id, compound) %>%
  na.omit() %>%
  dplyr::reframe(plant.id, compound, ngghr = sum(ngghr)) %>%
  distinct() %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  pivot_longer(-plant.id,
               names_to = "compound",
               values_to = "ngghr") %>%
  mutate(year = "2023") %>%
  left_join(field.2023 %>%
              dplyr::select(plant.id, 
                            swa, type, pair2),
            by = "plant.id",
            relationship = "many-to-many") %>%
  mutate_at(vars(swa), list(factor)) %>%
  # rbind 2022 data
  rbind(field.2022 %>%
          dplyr::select(plant.id, compound, ngghr) %>%
          # filter(compound %in% c('sixmethyl','z3hex','nonanal',
          #                       'dlimonene','methylsalicylate',
          #                       'decanal','cisthreehexiso','dodecanal',
          #                       'heptadecanal','octanal','bocimene',
          #                       'bmyrcene','heptanal')) %>%
          group_by(plant.id, compound) %>%
          na.omit() %>%
          dplyr::reframe(plant.id, compound, 
                           ngghr = sum(ngghr)) %>%
          distinct() %>%
          pivot_wider(names_from = "compound",
                      values_from = "ngghr") %>%
          pivot_longer(-plant.id,
                       names_to = "compound",
                       values_to = "ngghr") %>%
          mutate(year = "2022") %>%
          left_join(field.2022 %>%
                      dplyr::select(plant.id,
                                    swa, collection.type, pair2) %>%
                      mutate_at(vars(swa), list(factor)),
                    by = "plant.id",
                    relationship = "many-to-many") %>%
          rename(type = collection.type)) %>%
  distinct() 


# having trouble joining the two data sets because of the pair2 column 
joined.data.clr <-
joined.data %>%
  filter(compound %in% compounds) %>%
  dplyr::select(plant.id, ngghr, compound, year) %>%
  # replace(is.na(.), 0) %>% filter(compound != "NA") %>%
  mutate(ngghr = ifelse(ngghr == 0, 0.01, ngghr)) %>%
  mutate(ngghr = ngghr + 1) %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
    # combine year and plant id into one column
  unite(plant.id, plant.id, year, sep = "_") %>%
  column_to_rownames("plant.id") %>%
  clr() %>%
  # put rownames back as a column
  as.data.frame() %>%
  rownames_to_column("plant.id") %>%
    # move year and plant id back to being sepearte columns
  separate(plant.id, into = c("plant.id", "year"), sep = "_") %>%
  pivot_longer(-c(plant.id, year),
               names_to = "compound",
               values_to = "ngghr") %>%
  # add a value of 2 to each ngghr to remove negatives
  mutate(ngghr = ngghr + 2) %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  # join
  left_join(joined.data %>%
              dplyr::select(plant.id, swa, year, type, pair2) %>%
              mutate(plant.id = as.character(plant.id)),
            by = c("plant.id","year")) %>%
  mutate_at(vars(swa, year), list(factor)) %>%
  distinct() %>%
  na.omit() %>%
  # i'm going to ignore the "stressed" 
  # designation and just make those type "leaf"
  mutate(type = recode(type, "leaves" = "l", "flowers" = "f", "s" = "l")) %>%
  filter(!type == 0) %>%
  distinct()



```

## Field Volatile Collection
### Boxplot Comparison

Eleven compounds were selected to display comparisons. 
```{r all.comparison.plot, echo = F, fig.align = 'center', fig.width = 10}
all.comparison.plot <-
joined.data.clr %>%
  rename("cis-3-Hexenyl Isovalerate" = cisthreehexiso,
         "D-Limonene" = dlimonene,
         "Dodecanal" = dodecanal,
         "Heptanal" = heptanal,
         "Mehthyl Salicylate" = methylsalicylate,
         "Nonanal" = nonanal,
         "Octanal" = octanal,
         "6-methyl-5-hepten-2-one" = sixmethyl,
         "Z-3-Hexenyl Acetate" = z3hex,
         "B-Myrcene" = bmyrcene,
         "B-Ocimene" = bocimene) %>%
  # pivot to make all compounds in one column
  pivot_longer(-c(plant.id, year, swa, type, pair2),
               names_to = "compound",
               values_to = "ngghr") %>%
  # ggplot code
  ggplot(aes(compound, ngghr, fill = swa)) +
  geom_boxplot(position = position_dodge(width = 0.9),
                 outlier.color = NA,
                 alpha = 0.5) +
  geom_jitter(aes(compound, ngghr),
              alpha = 0.3,
              position = position_jitterdodge(jitter.width = 0.2,
                                              dodge.width = .8),
              show.legend = FALSE,
              # pch = 21, 
              stroke = 0, 
              size = 1.5) +
  theme(axis.text.x = element_text(angle = 45, 
                                    hjust = 1),
        legend.background = element_rect(color = "black"),
        # legend.position = c(0.8,0.9),
        panel.background = element_rect(fill = "white"),
        axis.line = element_line(color = "black"),
        plot.margin = margin(0.5,0.5,0.5,1.5,"cm"),
        panel.grid.major.x = element_line(color = "#F2F2F2")) +
  labs(x = element_blank(),
       y = "VOC quantity (CLR(ng/g/hr))",
       title = "2022/23 Field Locoweed Volatile Profile Comparison") +
  scale_fill_discrete(name = "Endophyte",
                      labels = c("Not Present", "Present"))
all.comparison.plot
```
```{r save all comparison plot, echo = F}
ggsave(filename = "Field Locoweed Comparison BoxPlot.png",
       plot = all.comparison.plot,
       path = "locoweed_plots/",
       width = 6,
       height = 4)
```
```{=html}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Download File Buttons</title>
<style>
/* Button styling */
.button {
  background-color: #2068DC; /* Header of website color (blue) */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  border-radius: 8px;
  margin: 0 200px;
}
.button:hover {
  background-color: #3F91FB; /* Sky blue */
}
.button-container {
  display: flex;
  justify-content: center;
  margin-bottom: 10px;
}
</style>
</head>
<body>

<!-- Buttons to download the file -->
<div class="button-container">
  <a href="locoweed_plots/Field Locoweed Comparison BoxPlot.png" download>
    <button class="button">Download</button>
  </a>

<div class="button-container">
  <a href="toadflax_plots/Toadflax_plots/Toadflax PCA Scores - Type_All.png" download>
    <button class="button">Download</button>
  </a>
</div>
</div>
</body>
</html>
```


### PERMANOVA
```{r PERMDISP & PERMANOVA data, echo = F}
set.seed(1)
permanova.data <-
  joined.data.clr %>%
  dplyr::select(-swa,-type,-year,-pair2) %>%
  column_to_rownames("plant.id") %>%
  na.omit() %>%
  mutate_all(~.^2) %>%
  mutate_all(~.*100000) %>%
  mutate_all(round, digits = 0) 

# dist.matrix <-
# vegdist(t(permanova.data),
#         method = "canberra")

dist.matrix <-
vegdist(permanova.data,
        method = "canberra")

data.per.meta <-
  joined.data.clr %>%
  dplyr::select(swa,type,year,pair2) %>%
  mutate(year = factor(year, levels = c("2023", "2022")))
```
```{r 22/23 FIELD PERMANOVA, echo = F, results = F}
set.seed(1)
permanova.output <-
adonis2(permanova.data ~ data.per.meta$swa, 
        strata = interaction(data.per.meta$pair2, 
                             data.per.meta$type, 
                             data.per.meta$year),
        method = "canberra",
        permutations = 999,
        by = "terms",
        na.rm = TRUE)
permanova.output
```
```{r PERMANOVA p-values, echo  = F}
p.value.swa <- permanova.output$`Pr(>F)`[1]
# p.value.year <- permanova.output$`Pr(>F)`[2]
# p.value.type <- permanova.output$`Pr(>F)`[3]
```

The locoweed samples, both SWA + and SWA -, exhibited numerous chromatogram peaks during collection. However, only volatile compoudns showing significant peaks inthe mass spectroscopy output or presenting differences in the overlays of the two SWA types were chosen for analysis. 

There was no interaction between plant species and data of volatile collection. 

Our results show **weak** evidence of a difference between SWA+ and SWA- locoweed plants (p-val = `r p.value.swa`).  
 
## Greenhouse Volatile Collection
<!-- LOAD DATA -->
```{r gh RAW 22, echo = F}
raw.gh.22 <-
read_excel("/Users/jacksonstrand/Library/CloudStorage/OneDrive-MontanaStateUniversity/Data/Locoweed/Greenhouse/2022\ Spring\ Greenhouse/Spring\ 2022\ Locoweed/Spring\ 2022\ GH\ Locoweed\ RESULTS.xlsx", sheet = "RAW2") %>%
  filter(remove == "no")
```
```{r gh RAW 23, echo = F}
raw.gh.23 <-
  read_excel("/Users/jacksonstrand/Library/CloudStorage/OneDrive-MontanaStateUniversity/Data/Locoweed/Greenhouse/2023\ Spring\ Greenhouse/Spring\ GH\ 23\ Locoweed\ Volatiles.xlsx", sheet = "RAW_PROC")

```
<!-- CLEAN DATA -->
```{r gh CLEAN 22, echo = F}
clean.gh.22 <-
raw.gh.22 %>%
  # filter(compound %in% c("heptanal", "sixmethyl", "octanal",
  #                        "z3hex", "dlimonene", "nonanal", 
  #                        "decanal", "methylsalicylate", "cisthreehexiso")) %>%
  dplyr::select(plant.id, compound, ngghr) %>%
  group_by(plant.id, compound) %>%
  na.omit() %>%
  filter(!compound == "standard") %>%
  dplyr::reframe(ngghr = sum(ngghr)) %>%
  distinct() %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  pivot_longer(-plant.id,
               names_to = "compound",
               values_to = "ngghr") %>%
  replace(is.na(.), 0) %>% filter(compound != "NA") %>%
  mutate(ngghr = log(ngghr + 1.01, 2)) %>%
  # pivot_wider(names_from = "compound",
  #             values_from = "ngghr") %>%
  left_join(raw.gh.22 %>% 
              dplyr::select(plant.id, swa, pair), # go back and add pairs later
            by = "plant.id",
            relationship = "many-to-many") %>%
  # replace(is.na(.), 0) %>%
  distinct() %>%
  mutate_at(vars(swa), list(factor)) %>%
  ungroup() %>%
  mutate(year = "2022")
```
```{r gh CLEAN 23, echo = F}
clean.gh.23 <-
raw.gh.23 %>%
  dplyr::select(plant.id, compound, ngghr) %>%
  group_by(plant.id, compound) %>%
  na.omit() %>%
  filter(!compound == "standard") %>%
  dplyr::reframe(ngghr = sum(ngghr)) %>%
  distinct() %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  pivot_longer(-plant.id,
               names_to = "compound",
               values_to = "ngghr") %>%
  replace(is.na(.), 0) %>% filter(compound != "NA") %>%
  mutate(ngghr = log(ngghr + 1.01, 2)) %>%
  # pivot_wider(names_from = "compound",
              # values_from = "ngghr") %>%
  left_join(raw.gh.23 %>% 
              dplyr::select(plant.id, swa, pair), # go back and add pairs later
            by = "plant.id",
            relationship = "many-to-many") %>%
  # replace(is.na(.), 0) %>%
  distinct() %>%
  mutate_at(vars(swa), list(factor)) %>%
  ungroup() %>%
  mutate(year = "2023") 
```
<!-- COMOPUNDS -->
```{r gh compounds, echo = F, results = F}
compounds22 <-
raw.gh.22 %>%
  dplyr::select(compound) %>%
  na.omit() %>% distinct() 
compounds23 <-
raw.gh.23 %>%
  dplyr::select(compound) %>%
  na.omit() %>% distinct() 
compounds22
compounds23 %>%
  print(n = 100)
gh.compounds <- as.list(intersect(compounds22, compounds23))$compound
```
<!-- CLR -->
```{r gh CLR, echo = F}
gh.joined.data <-
clean.gh.22 %>%
  dplyr::select(plant.id, compound, ngghr, swa, year, pair) %>%
  rbind(clean.gh.23 %>%
          dplyr::select(plant.id, compound, ngghr, swa, year, pair)) %>%
  distinct() %>%
  filter(compound %in% gh.compounds) %>%
  na.omit()

# having trouble joining the two data sets because of the pair2 column 
gh.joined.data.clr <-
gh.joined.data %>%
  dplyr::select(plant.id, ngghr, compound, year) %>%
  # replace(is.na(.), 0) %>% filter(compound != "NA") %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
    # combine year and plant id into one column
  unite(plant.id, plant.id, year, sep = "_") %>%
  column_to_rownames("plant.id") %>%
  clr() %>%
  # put rownames back as a column
  as.data.frame() %>%
  rownames_to_column("plant.id") %>%
    # move year and plant id back to being sepearte columns
  separate(plant.id, into = c("plant.id", "year"), sep = "_") %>%
  pivot_longer(-c(plant.id, year),
               names_to = "compound",
               values_to = "ngghr") %>%
  # add a value of 2 to each ngghr to remove negatives
  mutate(ngghr = ngghr + 4) %>%
  pivot_wider(names_from = "compound",
              values_from = "ngghr") %>%
  # join
  left_join(gh.joined.data %>%
              dplyr::select(plant.id, swa, year, pair) %>%
              mutate(plant.id = as.character(plant.id)),
            by = c("plant.id","year")) %>%
  mutate_at(vars(swa, year, pair), list(factor)) %>%
  distinct() %>%
  na.omit()
```

### Boxplot Comparison
```{r gh boxplot comparison, echo = F}
gh.joined.data.clr %>%
  # pivot to make all compounds in one column
  pivot_longer(-c(plant.id, year, swa, pair),
               names_to = "compound",
               values_to = "ngghr") %>%
  # ggplot code
  ggplot(aes(compound, ngghr, fill = swa)) +
  geom_boxplot(position = position_dodge(width = 0.9),
                 outlier.color = NA,
                 alpha = 0.5) +
  geom_jitter(aes(compound, ngghr),
              alpha = 0.3,
              position = position_jitterdodge(jitter.width = 0.2,
                                              dodge.width = .8),
              show.legend = FALSE,
              # pch = 21, 
              stroke = 0, 
              size = 1.5) +
  theme(axis.text.x = element_text(angle = 45, 
                                    hjust = 1),
        legend.background = element_rect(color = "black"),
        # legend.position = c(0.8,0.9),
        panel.background = element_rect(fill = "white"),
        axis.line = element_line(color = "black"),
        panel.grid.major.x = element_line(color = "#F2F2F2")) +
  labs(x = element_blank(),
       y = "VOC quantity (CLR(ng/g/hr))",
       title = "2022/23 Field Locoweed Volatile Profile Comparison") +
  scale_fill_discrete(name = "Endophyte",
                      labels = c("Not Present", "Present"))
```


### PERMANOVA
```{r gh PERMANOVA data, echo = F}
set.seed(1)
gh.permanova.data <-
  gh.joined.data.clr %>%
  dplyr::select(-swa, -pair) %>%
  unite(plant.id, plant.id, year, sep = "_") %>%
  column_to_rownames("plant.id") %>%
  na.omit() %>%
  mutate_all(~.^2) %>%
  mutate_all(~.*100000) %>%
  mutate_all(round, digits = 0) 

# meta data
gh.data.per.meta <-
  gh.joined.data.clr %>%
  dplyr::select(plant.id, swa,year,pair) %>%
  mutate(year = factor(year, levels = c("2023", "2022")))
```

```{r PERMANOVA, echo = F}
set.seed(1)
gh.permanova.output <-
adonis2(gh.permanova.data ~ gh.data.per.meta$swa, 
        strata = interaction(gh.data.per.meta$pair, 
                             gh.data.per.meta$year),
        # method = "canberra",
        permutations = 999,
        by = "terms")

gh.permanova.output
```

```{r gh PERMANOVA pvalues, echo = F}
gh.p.value.swa <- gh.permanova.output$`Pr(>F)`[1]
```

Our results show **moderate** evidence of a difference between SWA+ and SWA- locoweed plants (p-val = `r gh.p.value.swa`). 

# Data Overview

# APPENDIX

```{R clr data set print, echo = F}
set.seed(25)
kable(
joined.data.clr %>%
  dplyr::select(plant.id, bocimene, z3hex, nonanal, swa) %>%
  # rename(pair = pair2) %>%
  sample_n(size = n(), replace = FALSE) %>%
  mutate(bocimene = round(bocimene, digits = 2),
         z3hex = round(z3hex, digits = 2),
         nonanal = round(nonanal, digits = 2)) %>%
  head(),
align = c("l", "l", "r", "c", "c", "c", "c")
) %>%
  kable_styling(full_width = FALSE, position = "center") 

```


